# Pdf viewer for -pvc option
$pdf_previewer="open -a /Applications/Skim.app %S";

# Time out after being inactive for 15 minutes
$pvc_timeout=1;
$pvc_timeout_mins=15;

# Time between checks for -pvc (in seconds)
$sleep_time=5;

# Support for pythontex in v. 0.16 or higher, with latexmk 4.62 or higher
#
# What these definitions provide/do:
# 1. Variable specifying command string for invoking pythontex
# 2. Addition to %extra_rule_spec of template for pythontex rule. This
#    tells latexmkrc to create the rule when it is initializing for
#    processing a TeX file.
# 3. A subroutine mypythontex that the pythontex rule is defined to
#    call. This runs pythontex and then sets dependency information.
# 4. Settings for the files generated by the pythontex package and the
#    pythontex program so that the files are deleted in a clean-up
#    operation.

$clean_ext .= " pythontex-files-%R/* pythontex-files-%R";
push @generated_exts, 'pytxcode';

$pythontex = 'pythontex --interpreter python:python3 %O %S';
$extra_rule_spec{'pythontex'}  = [ 'internal', '', 'mypythontex', "%Y%R.pytxcode",  "%Ypythontex-files-%R/%R.pytxmcr",    "%R", 1 ];

sub mypythontex {
   my $result_dir = $aux_dir1."pythontex-files-$$Pbase";
   my $ret = Run_subst( $pythontex, 2 );
   rdb_add_generated( glob "$result_dir/*" );
   my $fh = new FileHandle $$Pdest, "r";
   if ($fh) {
      while (<$fh>) {
         if ( /^%PythonTeX dependency:\s+'([^']+)';/ ) {
	     print "Found pythontex dependency '$1'\n";
             rdb_ensure_file( $rule, $aux_dir1.$1 );
	 }
      }
      undef $fh;
   }
   else {
       warn "mypythontex: I could not read '$$Pdest'\n",
            "  to check dependencies\n";
   }
   return $ret;
}


# This shows how to deal with tikz when it is used in its externalized mode.
#
# Here is an example of a document that uses externalization.
# Externalization results in a .pdf file for each tikzpicture
# environment.
#
#  \documentclass{article}
#  \usepackage{tikz,pgfplots}
#  \usetikzlibrary{external}
#  \tikzexternalize[mode=list and make]
#  
#  \begin{document}
#  \begin{tikzpicture}
#    \begin{axis}
#      \addplot coordinates {(1,1) (2,2) (3,5)};
#    \end{axis}
#  \end{tikzpicture}%
#  \end{document}


$clean_ext .= ' %R.figlist %R-figure* %R.makefile fls.tmp';

$latex    = 'internal tikzlatex latex    %B %O %S';
$pdflatex = 'internal tikzlatex pdflatex %B %O %S';
$lualatex = 'internal tikzlatex lualatex %B %O %S';
$xelatex  = 'internal tikzlatex xelatex  %B %O %S';

$hash_calc_ignore_pattern{'pdf'} = '^(/CreationDate|/ModDate|/ID)';
$hash_calc_ignore_pattern{'ps'} = '^%%CreationDate';

sub tikzlatex {
    my ($engine, $base, @args) = @_;
    my $ret = 0;
    print "Tikzlatex: ===Running '$engine @args'...\n";
    $ret = system( $engine, @args );
    print "Tikzlatex: Fixing .fls file ...\n";
    system "echo INPUT \"$aux_dir1$base.figlist\"  >  \"$aux_dir1$base.fls.tmp\"";
    system "echo INPUT \"$aux_dir1$base.makefile\" >> \"$aux_dir1$base.fls.tmp\"";
    system "cat \"$aux_dir1$base.fls\"    >> \"$aux_dir1$base.fls.tmp\"";
    rename "$aux_dir1$base.fls.tmp", "$aux_dir1$base.fls";
    if ($ret) { return $ret; }
    if ( -e "$aux_dir1$base.makefile" ) {
	if ($engine eq 'xelatex') {
            print "Tikzlatex: ---Correcting '$aux_dir1$base.makefile' made under xelatex\n";
	    system( 'perl', '-i', '-p', '-e', 's/^\^\^I/\t/', "$aux_dir1$base.makefile" );
	}
	elsif ($engine eq 'latex') {
            print "Tikzlatex: ---Correcting '$aux_dir1$base.makefile' made under latex\n";
	    system( 'perl', '-i', '-p', '-e', 's/\.epsi/\.ps/', "$aux_dir1$base.makefile" );
	}
        print "Tikzlatex: ---Running 'make -f $aux_dir1$base.makefile' ...\n";
	if ($aux_dir) {
            # latexmk has set $ENV{TEXINPUTS} in this case.
   	    my $SAVETEXINPUTS = $ENV{TEXINPUTS};
  	    $ENV{TEXINPUTS} = good_cwd().$search_path_separator.$ENV{TEXINPUTS};
            pushd( $aux_dir );
            $ret = system "make",  "-j", "5", "-f", "$base.makefile";
            &popd;
            $ENV{TEXINPUTS} = $SAVETEXINPUTS;
        }
        else {
            $ret = system "make",  "-j", "5", "-f", "$base.makefile";
        }
        if ($ret) {
	    print "Tikzlatex: !!!!!!!!!!!!!! Error from make !!!!!!!!! \n",
	          "  The log files for making the figures '$aux_dir1$base-figure*.log'\n",
	          "  may have information\n";
	}
    }
    else {
        print "Tikzlatex: No '$aux_dir1$base.makefile', so I won't run make.\n";
    }
    return $ret;
}


add_cus_dep( 'acn', 'acr', 0, 'makeglossaries' );
add_cus_dep( 'glo', 'gls', 0, 'makeglossaries' );
$clean_ext .= " acr acn alg glo gls glg";
sub makeglossaries {
  my ($name, $path) = fileparse( $$Psource );
  return system "makeglossaries -d '$path' '$name'";
}